from collections import defaultdict
from collections import Counter
from collections import deque
import collections
import enum
from re import A
#import numpy as np

import sys
import argparse
import math
import random
from tkinter import N
# https://www.daleseo.com/python-typing/
from typing import Optional
from typing import Union
from typing import List
from typing import Final
from typing import Dict
from typing import Tuple
from typing import Set

import time
import heapq
from bisect import bisect_left , bisect_right

timeFlag = 0
debugFlag = 0
import math

class Solution:
    def kInversePairs(self, n: int, k: int) -> int:
        if k == 0:
            return 1
        if n == 1:
            return 0
        table = {}
        for i in range(n-1):
            for j in range(n):
                if i+j not in table:
                    table[i+j] = 0
                table[i+j] += 1
        # print("n:", n , "k:" , k ,"table:",table)
        
        ans = table
        for lop in reversed(range(2,n-1)):
            localans = {}
            for a in range(lop):
                if a > k :
                    break
                for inx,val in ans.items():
                    if inx+a not in localans:
                        localans[inx+a] = 0
                    localans[inx+a] += val
            ans = localans
            print(lop,"localans:",localans,len(localans))
        print("ans:",ans)
        if k in ans:
            return ans[k] % (10**9+7)
        else :
            return 0
        
def run(s,s1,expect):
    # print(len(s)," ",end="")
    start = time.time()
    A = Solution()
    r = A.kInversePairs(s,s1)
    print(" total_time1 : ", time.time() - start , "-> ", end="") 
    
    if r == expect:
        print("SUCCESS -> ",end="")
    else :
        print("ERROR(",expect,") -> ",sep="",end="")
    print(r, s , end="")  
    print()

if (__name__ == "__main__"):
    parser = argparse.ArgumentParser(
        prog='kInversePairs.py',
        description=
        'kInversePairs'
    )
    parser.add_argument( '--debug', '-d' , action='store_const' , const=1 , help='debug on')

    args = parser.parse_args()
    debug = args.debug
    if not debug:
        debug = 0

    print('kInversePairs problem :')

    run(10,15,110010)
    run(10,43,44)
    # run(15,15,19664205)
    # run(30,15,688272989)
    # run(50,15,932975515)
    # run(70,15,404529997)
    # run(100,15,687491764)     
    # run(100,1000,589091451)     

# kInversePairs problem :
# localans: {0: 1, 1: 3, 2: 6, 3: 10, 4: 15, 5: 21, 6: 28, 7: 36, 8: 44, 9: 51, 10: 56, 11: 59, 12: 60, 13: 59, 14: 56, 15: 51, 16: 44, 17: 36, 18: 28, 19: 21, 20: 15, 21: 10, 22: 6, 23: 3, 24: 1}
# localans: {0: 1, 1: 4, 2: 10, 3: 20, 4: 35, 5: 56, 6: 84, 7: 119, 8: 160, 9: 205, 10: 251, 11: 295, 12: 334, 13: 365, 14: 385, 15: 392, 16: 385, 17: 365, 18: 334, 19: 295, 20: 251, 21: 205, 22: 160, 23: 119, 24: 84, 25: 56, 26: 35, 27: 20, 28: 10, 29: 4, 30: 1}
# localans: {0: 1, 1: 5, 2: 15, 3: 35, 4: 70, 5: 126, 6: 209, 7: 324, 8: 474, 9: 659, 10: 875, 11: 1114, 12: 1364, 13: 1610, 14: 1835, 15: 2022, 16: 2156, 17: 2226, 18: 2226, 19: 2156, 20: 2022, 21: 1835, 22: 1610, 23: 1364, 24: 1114, 25: 875, 26: 659, 27: 474, 28: 324, 29: 209, 30: 126, 31: 70, 32: 35, 33: 15, 34: 5, 35: 1}
# localans: {0: 1, 1: 6, 2: 21, 3: 56, 4: 126, 5: 251, 6: 455, 7: 764, 8: 1203, 9: 1792, 10: 2541, 11: 3446, 12: 4486, 13: 5622, 14: 6798, 15: 7945, 16: 8987, 17: 9849, 18: 10465, 19: 10786, 20: 10786, 21: 10465, 22: 9849, 23: 8987, 24: 7945, 25: 6798, 26: 5622, 27: 4486, 28: 3446, 29: 2541, 30: 1792, 31: 1203, 32: 764, 33: 455, 34: 251, 35: 126, 36: 56, 37: 21, 38: 6, 39: 1}
# localans: {0: 1, 1: 7, 2: 28, 3: 84, 4: 209, 5: 454, 6: 888, 7: 1596, 8: 2673, 9: 4214, 10: 6300, 11: 8982, 12: 12265, 13: 16095, 14: 20352, 15: 24851, 16: 29352, 17: 33579, 18: 37246, 19: 40087, 20: 41886, 21: 42502, 22: 41886, 23: 40087, 24: 37246, 25: 33579, 26: 29352, 27: 24851, 28: 20352, 29: 16095, 30: 12265, 31: 8982, 32: 6300, 33: 4214, 34: 2673, 35: 1596, 36: 888, 37: 454, 38: 209, 39: 84, 40: 28, 41: 7, 42: 1}
# localans: {0: 1, 1: 8, 2: 36, 3: 119, 4: 321, 5: 747, 6: 1551, 7: 2938, 8: 5157, 9: 8483, 10: 13187, 11: 19496, 12: 27547, 13: 37342, 14: 48712, 15: 61298, 16: 74555, 17: 87782, 18: 100177, 19: 110912, 20: 119219, 21: 124475, 22: 126274, 23: 124475, 24: 119219, 25: 110912, 26: 100177, 27: 87782, 28: 74555, 29: 61298, 30: 48712, 31: 37342, 32: 27547, 33: 19496, 34: 13187, 35: 8483, 36: 5157, 37: 2938, 38: 1551, 39: 747, 40: 321, 41: 119, 42: 36, 43: 8, 44: 1}
# localans: {0: 1, 1: 9, 2: 44, 3: 155, 4: 440, 5: 1068, 6: 2298, 7: 4489, 8: 8095, 9: 13640, 10: 21670, 11: 32683, 12: 47043, 13: 64889, 14: 86054, 15: 110010, 16: 135853, 17: 162337, 18: 187959, 19: 211089, 20: 230131, 21: 243694, 22: 250749, 23: 250749, 24: 243694, 25: 230131, 26: 211089, 27: 187959, 28: 162337, 29: 135853, 30: 110010, 31: 86054, 32: 64889, 33: 47043, 34: 32683, 35: 21670, 36: 13640, 37: 8095, 38: 4489, 39: 2298, 40: 1068, 41: 440, 42: 155, 43: 44, 44: 9, 45: 1}
# ans: {0: 1, 1: 9, 2: 44, 3: 155, 4: 440, 5: 1068, 6: 2298, 7: 4489, 8: 8095, 9: 13640, 10: 21670, 11: 32683, 12: 47043, 13: 64889, 14: 86054, 15: 110010, 16: 135853, 17: 162337, 18: 187959, 19: 211089, 20: 230131, 21: 243694, 22: 250749, 23: 250749, 24: 243694, 25: 230131, 26: 211089, 27: 187959, 28: 162337, 29: 135853, 30: 110010, 31: 86054, 32: 64889, 33: 47043, 34: 32683, 35: 21670, 36: 13640, 37: 8095, 38: 4489, 39: 2298, 40: 1068, 41: 440, 42: 155, 43: 44, 44: 9, 45: 1}
#  total_time1 :  0.0003161430358886719 -> SUCCESS -> 110010 10
 
# $  python3 kInversePairs_v2.py
# kInversePairs problem :
#  total_time1 :  0.00020313262939453125 -> SUCCESS -> 110010 10
#  total_time1 :  0.001058340072631836 -> SUCCESS -> 19664205 15
#  total_time1 :  0.016200542449951172 -> SUCCESS -> 688272989 30
#  total_time1 :  0.14369940757751465 -> SUCCESS -> 932975515 50
#  total_time1 :  0.5862057209014893 -> SUCCESS -> 404529997 70
#  total_time1 :  2.5641469955444336 -> SUCCESS -> 687491764 100

# 1 0 1 [1] 
# 2 0 1 [1,2](0) oldVal=0  oldLen=2
# 2 1 1 [2,1](1) oldVal=1  oldLen=2
# 3일때 
# [3,1,2](oldLen + oldVal=0) [1,3,2](oldLen-1 + oldVal) [1,2,3] (oldLen-2 + oldVal)
# [3,2,1](oldLen + oldVal=1) [2,3,1] [2,1,3]
# 3 0 1 [1,2,3]
# 3 1 2 [2,1,3] [1,3,2]
# 3 2 2 [3,2,1] [3,1,2]
# 4 1 3
# 4 2 5

# q 갯수 증가
# 1 -> 1 
# 2 -> 2 * 1
# 0 1
# 3 ->  3* 2
# 0 1 2
# 1 2 3
# 4 -> 4 * 3 * 2 

# q Val 구조
# 4일대 위처럼 24개로 4 * 3 * 2
# 0 1 2 3
# 1 2 3 4
# 2 3 4 5
# 1 2 3 4
# 2 3 4 5
# 3 4 5 6

# 5* 4 * (3*2) = 120
# 0 1 2 3 4
# 1 2 3 4 5
# 2 3 4 5 6
# 3 4 5 6 7

# 1 2 3 4 5
# 2 3 4 5 6
# 3 4 5 6 7
# 4 5 6 7 8

# 2 3 4 5 6
# 3 4 5 6 7
# 4 5 6 7 8
# 5 6 7 8 9 

# 3 4 5 6 7
# 4 5 6 7 8
# 5 6 7 8 9 
# 6 7 8 9 10

# i: 2 n: 6 k: 10 q: [(1, 0)] 1
# i: 3 n: 6 k: 10 q: [(2, 0), (2, 1)] 2
# i: 4 n: 6 k: 10 q: [  n이 3일때
#     (3, 0), (3, 1), (3, 2), 
#     (3, 1), (3, 2), (3, 3)] 6
# i: 5 n: 6 k: 10 q: [ n이 4일때 2번 반복
#     (4, 0), (4, 1), (4, 2), (4, 3), 
#     (4, 1), (4, 2), (4, 3), (4, 4), 
#     (4, 2), (4, 3), (4, 4), (4, 5), 
    
#     (4, 1), (4, 2), (4, 3), (4, 4), 
#     (4, 2), (4, 3), (4, 4), (4, 5), 
#     (4, 3), (4, 4), (4, 5), (4, 6)] 24
# i: 6 n: 6 k: 10 q: [  n이 5일때 3번씩 2번 반복
#     (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), 
#     (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), 
#     (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), 
#     (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), 
    
#     (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), 
#     (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), 
#     (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), 
#     (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), 
    
#     (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), 
#     (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), 
#     (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), 
#     (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), 
    
#     (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)] 120
# n: 6 k: 10 q: [(6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 1), (6, 2),...



# n일때 아래 내용을 n * n-1 * (n-2*...*1)
# (n-2*...*1)까지 할 필요가 없고  k 까지만 하면 된다.
# 0 1 2 ... n-1
# 1 2 3 ... n
# ...
# n-2 ...   2n-3

# 1 2 3 ... n
# ...
# n-2 ...   2n-3
# n-1 ...   2n-2

# k <= 1000
# 위의 것을 max 1000번만 더하면 된다.
# 처음 start하는 값이 k이면 그게 끝.

# # this is timeout
# i: 2 n: 3 k: 10 q: [(1, 0)]
# i: 3 n: 3 k: 10 q: [(2, 0), (2, 1)]
# n: 3 k: 10 q: [(3, 0), (3, 1), (3, 2), (3, 1), (3, 2), (3, 3)]
# i: 2 n: 3 k: 1 q: [(1, 0)]
# i: 3 n: 3 k: 1 q: [(2, 0), (2, 1)]
# n: 3 k: 1 q: [(3, 0), (3, 1), (3, 2), (3, 1), (3, 2), (3, 3)]
# i: 2 n: 3 k: 2 q: [(1, 0)]
# i: 3 n: 3 k: 2 q: [(2, 0), (2, 1)]
# n: 3 k: 2 q: [(3, 0), (3, 1), (3, 2), (3, 1), (3, 2), (3, 3)]
# i: 2 n: 4 k: 1 q: [(1, 0)]
# i: 3 n: 4 k: 1 q: [(2, 0), (2, 1)]
# i: 4 n: 4 k: 1 q: [(3, 0), (3, 1), (3, 2), (3, 1), (3, 2), (3, 3)]
# n: 4 k: 1 q: [(4, 0), (4, 1), (4, 2), (4, 3), (4, 1), (4, 2), (4, 3), (4, 4), (4, 2), (4, 3), (4, 4), (4, 5), (4, 1), (4, 2), (4, 3), (4, 4), (4, 2), (4, 3), (4, 4), (4, 5), (4, 3), (4, 4), (4, 5), (4, 6)]
# i: 2 n: 4 k: 2 q: [(1, 0)]
# i: 3 n: 4 k: 2 q: [(2, 0), (2, 1)]
# i: 4 n: 4 k: 2 q: [(3, 0), (3, 1), (3, 2), (3, 1), (3, 2), (3, 3)]
# n: 4 k: 2 q: [(4, 0), (4, 1), (4, 2), (4, 3), (4, 1), (4, 2), (4, 3), (4, 4), (4, 2), (4, 3), (4, 4), (4, 5), (4, 1), (4, 2), (4, 3), (4, 4), (4, 2), (4, 3), (4, 4), (4, 5), (4, 3), (4, 4), (4, 5), (4, 6)]


# 7
# 15
# 1
# 0
# 1
# 1
# 1
# 2
# 3
# 10
# 3
# 0
# 3
# 1
# 3
# 2
# 4
# 1
# 4
# 2